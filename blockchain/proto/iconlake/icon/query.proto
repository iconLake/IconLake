syntax = "proto3";

package iconlake.icon;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "iconlake/icon/params.proto";
import "iconlake/icon/icon_data.proto";

option go_package = "iconlake/x/icon/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/iconlake/icon/params";
  }
  
  // Queries hash of a uri.
  rpc Hash (QueryHashRequest) returns (QueryHashResponse) {
    option (google.api.http) = {
      post: "/iconlake/icon/hash"
      body: "*"
    };
  }
  
  // Queries a NFT info.
  rpc NFT (QueryNFTRequest) returns (QueryNFTResponse) {
    option (google.api.http).get = "/iconlake/icon/nft/{classId}/{id}";
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryHashRequest {
  string hashType = 1;
  string uri      = 2;
}

message QueryHashResponse {
  string graphHash = 1;
  string fileHash  = 2;
}

message QueryNFTRequest {
  string classId = 1;
  string id      = 2;
}

message QueryNFTResponse {
  string   classId = 1;
  string   id      = 2;
  string   uri     = 3;
  string   uriHash = 4;
  IconData data    = 5;
}
