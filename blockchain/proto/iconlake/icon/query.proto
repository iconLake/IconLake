syntax = "proto3";

package iconlake.icon;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/nft/v1beta1/query.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "iconlake/icon/class_data.proto";
import "iconlake/icon/icon_data.proto";
import "iconlake/icon/params.proto";
import "iconlake/icon/creator.proto";

option go_package = "iconlake/x/icon/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/iconlake/icon/params";
  
  }
  
  // Queries a NFT info.
  rpc NFT (QueryNFTRequest) returns (QueryNFTResponse) {
    option (google.api.http).get = "/iconlake/icon/nft";
  
  }
  
  // Queries a list of NFTs of a class.
  rpc NFTs (cosmos.nft.v1beta1.QueryNFTsRequest) returns (QueryNFTsResponse) {
    option (google.api.http).get = "/iconlake/icon/nfts";
  
  }
  
  // Queries a class info.
  rpc Class (QueryClassRequest) returns (QueryClassResponse) {
    option (google.api.http).get = "/iconlake/icon/class";
  
  }
  
  // Queries a list of Class items.
  rpc Classes (cosmos.nft.v1beta1.QueryClassesRequest) returns (QueryClassesResponse) {
    option (google.api.http).get = "/iconlake/icon/classes";
  
  }
  
  // Queries a list of Creator items.
  rpc Creator    (QueryGetCreatorRequest) returns (QueryGetCreatorResponse) {
    option (google.api.http).get = "/iconlake/icon/creator/{address}";
  
  }
  rpc CreatorAll (QueryAllCreatorRequest) returns (QueryAllCreatorResponse) {
    option (google.api.http).get = "/iconlake/icon/creator";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message NFT {
  string   class_id = 1;
  string   id       = 2;
  string   uri      = 3;
  string   uri_hash = 4;
  IconData data     = 5;
}

message QueryNFTRequest {
  string class_id = 1;
  string id       = 2;
}

message QueryNFTResponse {
  NFT nft = 1;
}

message QueryNFTsResponse {
  repeated NFT                                    nfts       = 1;
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryClassRequest {
  string id = 1;
}

message Class {
  string    id          = 1;
  string    name        = 2;
  string    symbol      = 3;
  string    description = 4;
  string    uri         = 5;
  string    uri_hash    = 6;
  ClassData data        = 7;
}

message QueryClassResponse {
  Class class = 1;
}

message QueryClassesResponse {
  repeated Class                                  classes    = 1;
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCreatorRequest {
  string address = 1;
}

message QueryGetCreatorResponse {
  Creator creator = 1 [(gogoproto.nullable) = false];
}

message QueryAllCreatorRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCreatorResponse {
  repeated Creator                                creator    = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
